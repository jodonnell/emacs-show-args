(defun before-and-after (test)
  (save-excursion
    (set-buffer (generate-new-buffer "test-scratch"))
    (show-args-mode t)
    (funcall test)
    (kill-buffer "test-scratch")))

(defun get-display-prop-at-position (position)
  (overlay-get (car (overlays-at position)) 'display))

(setq redirect-to-doc "Hash | Record | String | Proc | :back, {:status :flash :notice :alert}")

(deftest "can get associated documentation for function symbol"
  (assert-equal redirect-to-doc (show-args-for-symbol 'redirect_to)))

(deftest "it can tell you if thing at point is a know function"
  (before-and-after
   (lambda()
     (insert "redirect_to")
     (assert-t (show-args-is-known-function-at-point)))))

(deftest "can get associated documentation for function string"
  (assert-equal redirect-to-doc (show-args-for "redirect_to")))

(deftest "can tell you if the lookup failed"
  (assert-t (show-args-function-docs-exist 'redirect_to))
  (assert-nil (show-args-function-docs-exist 'poop)))

(deftest "can get associated documentation for function thing at point"
  (before-and-after
   (lambda()
     (insert "redirect_to")
     (assert-equal redirect-to-doc (show-args-for-at-point)))))

(deftest "creates one space"
  (before-and-after
   (lambda()
    (show-args-create-a-space-at-point)
    (assert-t (looking-at " ")))))

(deftest "it will create an overlay at point after space"
  (before-and-after 
   (lambda()
    (show-args-create-overlay-at-point)
    (assert-nonnil (overlays-at (+ 1 (point)))))))

(deftest "it can show you the first char in an overlay"
  (before-and-after
   (lambda()
     (insert "redirect_to")
     (show-args-create-functions-overlay-at-point) 
     (insert " ")
     (assert-equal "H" (show-args-first-char-in-overlay show-args-overlay)))))

(deftest "it can tell you the length of an empty overlay"
  (before-and-after 
   (lambda()
     (insert "test_one_arg")
     (show-args-create-functions-overlay-at-point) 
     (insert " ")
     (insert "s")
     (assert-t (show-args-overlay-empty show-args-overlay)))))

(deftest "it will show the arguments in an overlay"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (show-args-create-functions-overlay-at-point) 
     (assert-equal redirect-to-doc (get-display-prop-at-position (+ 1 (point)))))))

(deftest "it will clean up if you type anything other than a space or open paren"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (show-args-create-functions-overlay-at-point) 
     (insert "a")
     (assert-nil (overlays-in (point-min) (point-max)))
     (assert-nil (text-property-any (point-min) (point-max) 'show-args-text-property t)))))

(deftest "it will remove the autospace if you type a space or open paren"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (show-args-create-functions-overlay-at-point) 
     (insert "(")
     (assert-nonnil (overlays-in (point) (+ 1 (point)))))))

(deftest "when you start typing a one argument function it removes the overlay"
  (before-and-after 
   (lambda()
     (insert "test_one_arg")
     (show-args-create-functions-overlay-at-point)
     (insert " ")
     (insert "s")
     (assert-nil (car (overlays-at (point)))))))

(deftest "when you start typing a multiple argument function it removes the first part of the overlay"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (show-args-create-functions-overlay-at-point)
     (insert " ")
     (insert "m")
     (assert-equal ", {:status :flash :notice :alert}" (get-display-prop-at-position (point))))))

(deftest "after first argument comma replaces comma inside overlay"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (show-args-create-functions-overlay-at-point)
     (insert " ")
     (insert "m")
     (insert ",")
     (assert-equal  " {:status :flash :notice :alert}" (get-display-prop-at-position (point))))))

(deftest "after comma space replaces space inside overlay"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (show-args-create-functions-overlay-at-point)
     (insert " ")
     (insert "m")
     (insert ",")
     (insert " ")
     (assert-equal  "{:status :flash :notice :alert}" (get-display-prop-at-position (point))))))

(deftest "there are no residual spaces left"
  (before-and-after 
   (lambda()
     (insert "test_one_arg")
     (show-args-create-functions-overlay-at-point)
     (insert " ")
     (insert "s")
     (assert-nil (string= " " (buffer-substring-no-properties (- (point-max) 1) (point-max)))))))




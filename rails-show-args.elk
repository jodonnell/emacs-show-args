(defun before-and-after (test)
  (save-excursion
    (set-buffer (generate-new-buffer "test-scratch"))
    (funcall test)
    (kill-buffer "test-scratch")))

(defun get-display-prop-at-position (position)
  (overlay-get (car (overlays-at position)) 'display))

(setq redirect-to-doc "Hash | Record | String | Proc | :back, {:status, :flash, :notice, :alert}")
(setq redirect-to-second-arg-doc ", {:status, :flash, :notice, :alert}")

(deftest "can get associated documentation for function symbol"
  (assert-equal redirect-to-doc (show-args-for-symbol 'redirect_to)))

(deftest "can get associated documentation for function string"
  (assert-equal redirect-to-doc (show-args-for "redirect_to")))

(deftest "can tell you if the lookup failed"
  (assert-t (show-args-function-docs-exist 'redirect_to))
  (assert-nil (show-args-function-docs-exist 'poop)))

(deftest "can get associated documentation for function thing at point"
  (before-and-after
   (lambda()
     (insert "redirect_to")
     (assert-equal redirect-to-doc (show-args-for-at-point)))))

(deftest "create two spaces"
  (before-and-after
   (lambda()
    (show-args-create-a-space-at-point)
    (assert-t (looking-at " ")))))

(deftest "it will create an overlay at point"
  (before-and-after 
   (lambda()
    (show-args-create-overlay-at-point)
    (assert-nonnil (overlays-at (point))))))

(deftest "it will show the arguments in an overlay"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (show-args-create-functions-overlay-at-point) 
     (assert-equal redirect-to-doc (get-display-prop-at-position (point))))))

(deftest "when you start typing a one argument function it removes the overlay"
  (before-and-after 
   (lambda()
     (insert "test_one_arg")
     (show-args-create-functions-overlay-at-point)
     (insert "s")
     (assert-nil (car (overlays-at (point)))))))

(deftest "when you start typing a multiple argument function it removes the first part of the overlay"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (show-args-create-functions-overlay-at-point)
     (insert "m")
     (assert-nil (car (overlays-at (point))))
     (assert-equal redirect-to-second-arg-doc (get-display-prop-at-position (+ 1 (point)))))))

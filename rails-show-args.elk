(defun before-and-after (test)
  (save-excursion
    (setq sa-overlay nil)
    (setq sa-point-at-know-function nil)
    (set-buffer (generate-new-buffer "test-scratch"))
    (show-args-mode t)
    (funcall test)
    (sa-cleanup)
    (kill-buffer "test-scratch")))

(defun get-display-prop-at-position (position)
  (overlay-get (car (overlays-at position)) 'display))

(setq redirect-to-doc "Hash | Record | String | Proc | :back, {:status :flash :notice :alert}")

(deftest "it can tell you if thing behind point is a know function"
  (before-and-after
   (lambda()
     (insert "redirect_to")
     (assert-t (sa-is-known-function-behind-point)))))

(deftest "it can tell if you are completing a know function in the middle"
  (before-and-after
   (lambda()
     (insert "redirect_to")
     (backward-char 1)
     (assert-nil (sa-is-known-function-behind-point)))))

(deftest "can get associated documentation for function thing at point"
  (before-and-after
   (lambda()
     (insert "redirect_to")
     (assert-equal redirect-to-doc (sa-for-at-point)))))

(deftest "creates one space"
  (before-and-after
   (lambda()
     (sa-create-two-spaces-at-point)
     (assert-t (looking-at "  ")))))

(deftest "it will create an overlay at point after space"
  (before-and-after 
   (lambda()
     (insert "  ")
     (backward-char 2)
     (sa-create-overlay-at-point)
     (assert-nonnil (overlays-at (+ 1 (point)))))))

(deftest "it can show you the first char in an overlay"
  (before-and-after
   (lambda()
     (insert "redirect_to")
     (sa-create-functions-overlay-at-point) 
     (insert " ")
     (assert-equal "H" (sa-first-char-in-overlay sa-overlay)))))

(deftest "it will show the arguments in an overlay"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (sa-create-functions-overlay-at-point) 
     (assert-equal redirect-to-doc (get-display-prop-at-position (+ 1 (point)))))))

(deftest "it will clean up if you type anything other than a space or open paren"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (sa-create-functions-overlay-at-point) 
     (insert "a")
     (assert-nil (overlays-in (point-min) (point-max))))))

(deftest "it will remove the autospace if you type a space or open paren"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (sa-create-functions-overlay-at-point) 
     (insert "(")
     (assert-nonnil (overlays-in (point) (+ 1 (point)))))))

(deftest "when you start typing a one argument function it removes the overlay"
  (before-and-after 
   (lambda()
     (insert "test_one_arg")
     (sa-create-functions-overlay-at-point)
     (insert " ")
     (insert "s")
     (assert-nil (car (overlays-at (point)))))))

(deftest "when you start typing a multiple argument function it removes the first part of the overlay"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (sa-create-functions-overlay-at-point)
     (insert " ")
     (insert "m")
     (assert-equal ", {:status :flash :notice :alert}" (get-display-prop-at-position (point))))))

(deftest "after first argument comma replaces comma inside overlay"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (sa-create-functions-overlay-at-point)
     (insert " ")
     (insert "m")
     (insert ",")
     (assert-equal  " {:status :flash :notice :alert}" (get-display-prop-at-position (point))))))

(deftest "after comma space replaces space inside overlay"
  (before-and-after 
   (lambda()
     (insert "redirect_to")
     (sa-create-functions-overlay-at-point)
     (insert " ")
     (insert "m")
     (insert ",")
     (insert " ")
     (assert-equal  "{:status :flash :notice :alert}" (get-display-prop-at-position (point))))))

(deftest "there are no residual spaces left"
  (before-and-after 
   (lambda()
     (insert "test_one_arg")
     (sa-create-functions-overlay-at-point)
     (insert " ")
     (insert "s")
     (assert-nil (string= " " (buffer-substring-no-properties (- (point-max) 1) (point-max)))))))

(deftest "will work with ruby-mode"
  (before-and-after 
   (lambda()
     (ruby-mode)
     (show-args-mode)
     (insert "test_one_arg")
     (sa-create-functions-overlay-at-point)
     (insert " ")
     (insert "m")
     (assert-nil sa-overlay))))

